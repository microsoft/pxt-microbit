{
  "SImage.blit": "Copy an image from a source rectangle to a destination rectangle, stretching or\ncompressing to fit the dimensions of the destination rectangle, if necessary.",
  "SImage.blitRow": "Scale and copy a row of pixels from a texture.",
  "SImage.clone": "Return a copy of the current image\n\nReturn a copy of the current image",
  "SImage.copyFrom": "Sets all pixels in the current image from the other image, which has to be of the same size and\nbpp.",
  "SImage.doubled": "Stretches the image in both directions by 100%",
  "SImage.doubledX": "Stretches the image horizontally by 100%",
  "SImage.doubledY": "Stretches the image vertically by 100%",
  "SImage.drawCircle": "Draw a circle",
  "SImage.drawIcon": "Draw an icon (monochromatic image) using given color",
  "SImage.drawImage": "Draw given image on the current image",
  "SImage.drawLine": "Draw a line",
  "SImage.drawRect": "Draw an empty rectangle",
  "SImage.drawTransparentImage": "Draw given image with transparent background on the current image",
  "SImage.equals": "Returns true if the provided image is the same as this image,\notherwise returns false.",
  "SImage.fill": "Fill entire image with a given color\n\nFill entire image with a given color",
  "SImage.fillCircle": "Fills a circle",
  "SImage.fillPolygon4": "Fills a 4-side-polygon",
  "SImage.fillRect": "Fill a rectangle",
  "SImage.fillTriangle": "Fills a triangle",
  "SImage.flipX": "Flips (mirrors) pixels horizontally in the current image\n\nFlips (mirrors) pixels horizontally in the current image",
  "SImage.flipY": "Flips (mirrors) pixels vertically in the current image\n\nFlips (mirrors) pixels vertically in the current image",
  "SImage.getPixel": "Get a pixel color\n\nGet a pixel color",
  "SImage.getRows": "Copy row(s) of pixel from image to buffer (8 bit per pixel).",
  "SImage.height": "Get the height of the image",
  "SImage.isMono": "True if the image is monochromatic (black and white)",
  "SImage.mapRect": "Replace colors in a rectangle",
  "SImage.overlapsWith": "Check if the current image \"collides\" with another",
  "SImage.replace": "Replaces one color in an image with another\n\nReplaces one color in an image with another",
  "SImage.rotated": "Returns an image rotated by -90, 0, 90, 180, 270 deg clockwise",
  "SImage.scroll": "Every pixel in image is moved by (dx,dy)\n\nEvery pixel in image is moved by (dx,dy)",
  "SImage.setPixel": "Set pixel color\n\nSet pixel color",
  "SImage.setRows": "Copy row(s) of pixel from buffer to image.",
  "SImage.transposed": "Returns a transposed image (with X/Y swapped)",
  "SImage.width": "Get the width of the image",
  "ScreenImage.brightness": "Gets current screen backlight brightness (0-100)",
  "ScreenImage.setBrightness": "Sets the screen backlight brightness (10-100)",
  "helpers.imageRotated": "Returns an image rotated by 90, 180, 270 deg clockwise",
  "image.create": "Create new empty (transparent) image",
  "image.doubledIcon": "Double the size of an icon",
  "image.ofBuffer": "Create new image with given content",
  "images": "Creation, manipulation and display of LED images.\n\nImage manipulation blocks",
  "images._image": "An image",
  "images._image|param|image": "the image",
  "img": "Tagged image literal converter",
  "pins": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "pins.createBuffer": "Create a new zero-initialized buffer.",
  "pins.createBuffer|param|size": "number of bytes in the buffer",
  "pins.pinByCfg": "Get a pin by configuration id (DAL.CFG_PIN...)",
  "pins.pulseDuration": "Get the duration of the last pulse in microseconds. This function should be called from a ``onPulsed`` handler.\n\nGet the duration of the last pulse in microseconds. This function should be called from a\n``onPulsed`` handler.",
  "simage.screenImage": "Get the screen image"
}